#!/usr/bin/perl
# vim: set ai noet ts=4 sw=4 sts=4 ft=perl :

use utf8;
use open qw (:std :utf8);
use strict;
use warnings;
use Carp qw (confess);
use Data::Dumper;
use Fcntl qw(:seek :mode :DEFAULT);
use 5.22.2;
use JSON::XS;
use Net::DBus;
use POSIX qw (setsid);
use threads;

sub input_thread();
sub readconf();
sub gettimestr();
sub getlastr();
sub getbatterychargestr2();
sub getbatterychargestr3();
sub to_hours ($);
sub meminfo();
sub ifaces();
sub cpuspeed();
sub cputemp();
sub caps();
sub caps_find();

sub spawn(@);

binmode STDIN;
binmode STDERR;
binmode STDOUT;

my $read = 0;
$SIG{__DIE__} = \&Carp::confess;;
$SIG{"CONT"} = sub { $read = 1 };
$SIG{"STOP"} = sub { $read = 0 };
$SIG{"PIPE"} = sub { warn "SIGPIPE" };
$SIG{"HUP"} = sub { warn "SIGHUP" };
$SIG{"USR1"} = sub { warn "SIGUSR1" };
$SIG{"WINCH"} = sub { warn "SIGWINCH" };

my $slow_timer = 360; # 0.333 * 360 ~= 2 min
my $onesec_timer = 3; # 0.333 * 3   ~= 1 sec

# read config
my ($C, %CMD) = readconf();
my $buttonsamount = @{$C};

my @months = ('Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек');
my @wdays = ('Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб');

my $tmp = '';

my $charge = '';
my $la = '';
my $time = '';
my $mem = '';
my $net = '';
my $cpuspeed = '';
my $cputemp = '';
my $caps = '';

# file handles :)
my $LAHANDLE;
my $MEMINFOHANDLE;
my $CPUTEMPHANDLE;
my %CPUSCALEHANDLE;
my %CPUSCALEMAXHANDLE;
my $ROUTEHANDLE;
my %IFSTATEHANDLE;
my $CAPSHANDLE;
my $ACHANDLE;
my $DCHANDLE;

# global vars
my $CAPSPATH;
my @IFACE = qw (wlan0);
my %IFSTATE;
my %IFPSTATE;
my %IFADDR;
my $ACFILE;

# main json 'object';
my $ji; # input
my $jo; # output
# output changed flag;
my $jf = 1; # if true - we should ot show json

if ( -f "/sys/class/power_supply/ADP1/online") {
	$ACFILE = "/sys/class/power_supply/ADP1/online";
} elsif ("/sys/class/power_supply/AC/online") {
	$ACFILE = "/sys/class/power_supply/AC/online";
}

# prep dee-boos connection
my $bus = Net::DBus->system;
my $upower = $bus->get_service("org.freedesktop.UPower");
my $properties = $upower->get_object("/org/freedesktop/UPower/devices/battery_BAT0", "org.freedesktop.DBus.Properties");

threads->create('input_thread')->detach();

# capture click events and do not override sigstop and sigcont numbers
syswrite STDOUT, '{"version": 1, "click_events": true}
[ [], 
';

sleep 1;

while (1) {
	# json message that will be spewed to i3bar
	my $je;

	if ($onesec_timer >= 3) {
#		$cpuspeed = cpuspeed();

		$tmp = cputemp();
		if ($cputemp ne $tmp) {
			$jf = 1;
			$cputemp = $tmp;
		}

		$tmp = gettimestr();
		if ($time ne $tmp) {
			$jf = 1;
			$time = $tmp;
		}

		$tmp = meminfo();
		if ($mem ne $tmp) {
			$jf = 1;
			$mem = $tmp;
		}

		$tmp = ifaces();
		if ($net ne $tmp) {
			$jf = 1;
			$net = $tmp;
		}

		$onesec_timer = 0;
	}

	if ($slow_timer >= 360) {
		$tmp = getbatterychargestr3();
		if ($charge ne $tmp) {
			$jf = 1;
			$charge = $tmp;
		}

		$tmp = getlastr();
		if ($la ne $tmp) {
			$jf = 1;
			$la = $tmp;
		}
		$CAPSPATH = caps_find() unless (defined($CAPSPATH));
		$slow_timer = 0;
	}

	$tmp = caps();
	if ($caps ne $tmp) {
		$jf = 1;
		$caps = $tmp;
	}

	if ($jf) {
		$jo->[0]->{full_text} = $time;
		$jo->[0]->{color} = '#3e78fd';
		$jo->[1]->{full_text} = $charge;
		$jo->[1]->{color} = '#3e78fd';
		$jo->[2]->{full_text} = $mem;
		$jo->[2]->{color} = '#3e78fd';
		$jo->[3]->{full_text} = $la;
		$jo->[3]->{color} = '#3e78fd';
		$jo->[4]->{full_text} = $cputemp;
		$jo->[4]->{color} = '#3e78fd';
		$jo->[5]->{full_text} = $net;
		$jo->[5]->{color} = '#3e78fd';
		$jo->[6]->{full_text} = $caps;
		$jo->[6]->{color} = '#3e78fd';

		@{$je} = (@{$jo}, @{$C});
		@{$je} = reverse(@{$je});

		my $output = eval { encode_json($je); };

		if ($output) {
			syswrite STDOUT, $output . ",\n";
		}

		$jf = 0;
	}
# tick timers
	$slow_timer++;
	$onesec_timer++;

# sleep for 0.333 second;
	select(undef, undef, undef, 0.333);
}

sub readconf() {
	open (my $CONF, '<:encoding(UTF-8)', "$ENV{HOME}/.i3/config.json") or die "Unable to open $ENV{HOME}/.i3/config.json: $!\n";
	my $len = (stat "$ENV{HOME}/.i3/config.json")[7];
	use bytes;
	read ($CONF, my $c, $len) or die "unable to read $ENV{HOME}/.i3/config.json";
	no bytes;
	close $CONF;
	$c = eval { decode_json ($c); };

	if ($@) {
		die "Unable to decode $ENV{HOME}/.i3/config.json: $@\n";
	}

	my ($j, %cmd);
	my $cnt = 0;

	foreach (@{$c}) {
		$j->[$cnt]->{full_text} = $_->{full_text} // 'no fucken name';
		$j->[$cnt]->{name} =      $_->{name}      // $_->{full_text};
		$j->[$cnt]->{instance} =  $_->{instance}  // $_->{full_text};
		$j->[$cnt]->{color} =     $_->{color}     // '#00aa33';
		$cmd{$_->{name}} =        $_->{cmd}       // '/usr/bin/true';
		$cnt++
	}

	return ($j, %cmd);
}

sub input_thread() {
# on input of this script i3bar sends infinite json array
# one special thing about it: all elements of this array presented as
# text string ended wth new line, so we can omit first string and parse
# elements as independed json messages, but we have to strip leading ","

	readline(*STDIN); # throw away leading "[\n"
	my $char;

	while (1) {
		my $msg = eval { readline(*STDIN) };
		next unless ($msg);
		$msg = substr($msg, 1) if (substr($msg, 0, 1) eq ','); # drop leading ',' if present
		my $j = decode_json($msg);

		if (defined($CMD{$j->{name}})) {
			spawn($CMD{$j->{name}});
		}
	}
}

sub gettimestr() {
	my ($sec, $min, $hour, $mday, $mon, $year, $wday) = (localtime)[0,1,2,3,4,5,6];
	$year = $year + 1900;
	my $str .= sprintf("     %s, %s %s %s  %02s:%02s  ", $wdays[$wday], $mday, $months[$mon], $year, $hour, $min);

	return $str;
}

sub getlastr() {
	if (defined($LAHANDLE)) {
		open ($LAHANDLE, "/proc/loadavg") if (tell($LAHANDLE) == -1);
	} else {
		open ($LAHANDLE, "/proc/loadavg");
	}

	my $la = readline($LAHANDLE);
	seek $LAHANDLE, SEEK_SET, 0;
	$la = (split(/ /, $la, 2))[0];

	return ("LA: $la");
}

sub getbatterychargestr2() {
	my $str .= "⚡ ";

	if (defined($ACHANDLE)) {
		open ($ACHANDLE, $ACFILE) if (tell($ACHANDLE) == -1);
	} else {
		open ($ACHANDLE, $ACFILE);
	}

	if (readline($ACHANDLE) == 1) {
		$str .= "AC";
	} else {
		$str .= "DC";
	}

	seek $ACHANDLE, SEEK_SET, 0;

	if (defined($DCHANDLE)) {
		open ($DCHANDLE, "/sys/class/power_supply/BAT0/capacity") if (tell($DCHANDLE) == -1);
	} else {
		open ($DCHANDLE, "/sys/class/power_supply/BAT0/capacity");
	}

	$str .= " " . readline($DCHANDLE);
	chomp($str);
	$str .= '%';
	seek $DCHANDLE, SEEK_SET, 0;

	return $str;
}

sub getbatterychargestr3() {
	my $capacity = $properties->Get('org.freedesktop.UPower.Device', 'Percentage');
	my $state = $properties->Get('org.freedesktop.UPower.Device', 'State');
	my $time = "?";

	if ($state == 2) {
# discharging
		$time = $properties->Get('org.freedesktop.UPower.Device', 'TimeToEmpty');
		# time in seconds, let's translate it to hours:minutes
		$state = '▼';
	} elsif ($state == 1) {
# charging
		$time = $properties->Get('org.freedesktop.UPower.Device', 'TimeToFull');
		$state = '▲';
	} else {
# already charged
		$time = 0;
		$state = '•';
	}

	$time = to_hours ($time) unless ($time eq '?');

	return sprintf("⚡ %s%% %s %s", $capacity, $state, $time);
}

sub to_hours ($) {
	my $sec = shift;

	my $hrs = $sec / (60 * 60);
	$hrs = 0 if ( $hrs < 1 );
	my $min = ($sec - ($hrs * 60 * 60)) / 60;
	$min = 0 if ( $min < 1 );

	return sprintf("%02d:%02d", $hrs, $min);
}

sub meminfo() {
	if (defined($MEMINFOHANDLE)) {
		open ($MEMINFOHANDLE, "/proc/meminfo") if (tell($MEMINFOHANDLE) == -1);
	} else {
		open ($MEMINFOHANDLE, "/proc/meminfo");
	}

	my @mem;

	while ( ! eof($MEMINFOHANDLE) ) {
		push @mem, readline($MEMINFOHANDLE);
	}

	seek $MEMINFOHANDLE, SEEK_SET, 0;
	@mem = map { substr($_, 0, -4) } @mem;
	my $memavail = (split(/\s+/, $mem[2]))[1];
	my $swaptotal = (split(/\s+/, $mem[14]))[1];
	my $swapfree = (split(/\s+/, $mem[15]))[1];

	return sprintf (
		"mem/sw: %s/%s M",
		int($memavail / 1024),
		int(($swaptotal - $swapfree) / 1024)
	);
}

sub ifaces() {
	my $str = '';

	foreach my $if (@IFACE) {
		my $addr = "no addr";
		my $link;

		if (defined($IFSTATEHANDLE{$if})) {
			if (tell($IFSTATEHANDLE{$if}) == -1) {
				unless (open ($IFSTATEHANDLE{$if}, "/sys/class/net/$if/operstate")) {
					$str .= "? $if: not exist";
					next;
				}
			}
		} else {
			open ($IFSTATEHANDLE{$if}, "/sys/class/net/$if/operstate") or do {
				$str .= "? $if: not exist";
				next;
			};
		}

		$IFSTATE{$if} = readline($IFSTATEHANDLE{$if});
		seek $IFSTATEHANDLE{$if}, SEEK_SET, 0;
		$IFPSTATE{$if} = $IFSTATE{$if} unless(defined($IFPSTATE{$if}));

		if ($IFSTATE{$if} eq "up\n") {
			$link = '▲';
		} else {
			$link = '▼';
		}

		if ($IFPSTATE{$if} ne $IFSTATE{$if}) {
			$IFADDR{$if} = undef;
			$IFPSTATE{$if} = $IFSTATE{$if}
		}

		unless (defined($IFADDR{$if})) {
			if (defined($ROUTEHANDLE)) {
				open ($ROUTEHANDLE, "/proc/self/net/route") if (tell($ROUTEHANDLE) == -1);
			} else {
				open ($ROUTEHANDLE, "/proc/self/net/route");
			}

			my @route;

			while ( ! eof($ROUTEHANDLE)) {
				push @route, readline($ROUTEHANDLE);
			}

			seek $ROUTEHANDLE, SEEK_SET, 0;

			foreach my $r (@route) {
				if ((split(/\t/, $r, 2))[0] eq $if) {
					$addr = (split(/\n/, `/sbin/ip address show dev $if`))[2];
					$addr =~ m/    inet (.+)\//;
					$IFADDR{$if} = $1;

					last;
				}
			}
		}

		unless (defined($IFADDR{$if})) {
			$str .= sprintf("%s %s: %s", $link, $if, $addr);
		} else {
			$str .= sprintf("%s %s: %s", $link, $if, $IFADDR{$if});
		}
	}

	return $str;
}

sub cpuspeed() {
	my $str = 'cpu:';

	opendir(C, "/sys/devices/system/cpu/cpufreq") or do {
		return '';
	};

	while (readdir(C)) {
		next if($_ eq '.');
		next if($_ eq '..');

		if (defined($CPUSCALEHANDLE{$_})) {
			if (tell($CPUSCALEHANDLE{$_}) == -1) {
				unless (open ($CPUSCALEHANDLE{$_}, "/sys/devices/system/cpu/cpufreq/$_/scaling_cur_freq")) {
					return '';
				}
			}
		} else {
			open ($CPUSCALEHANDLE{$_}, "/sys/devices/system/cpu/cpufreq/$_/scaling_cur_freq") or do {
				return '';
			};
		}

		my $speed = readline($CPUSCALEHANDLE{$_});
		seek $CPUSCALEHANDLE{$_}, SEEK_SET, 0;
		chomp $speed;
		$speed = int($speed / 1000);

		if (defined($CPUSCALEMAXHANDLE{$_})) {
			if (tell($CPUSCALEMAXHANDLE{$_}) == -1) {
				unless (open ($CPUSCALEMAXHANDLE{$_}, "/sys/devices/system/cpu/cpufreq/$_/scaling_max_freq")) {
					return '';
				}
			}
		} else {
			open ($CPUSCALEMAXHANDLE{$_}, "/sys/devices/system/cpu/cpufreq/$_/scaling_max_freq") or do {
				return '';
			};
		}

		my $speedmax = readline($CPUSCALEMAXHANDLE{$_});
		seek $CPUSCALEHANDLE{$_}, SEEK_SET, 0;
		chomp $speedmax;
		$speedmax = int($speedmax / 1000);
		$str .= sprintf(" %s/%s", $speed, $speedmax);
	}

	closedir C;

	return $str . " MHz";
}

sub cputemp() {
	if (defined($CPUTEMPHANDLE)) {
		if (tell($CPUTEMPHANDLE) == -1) {
			unless (open ($CPUTEMPHANDLE, "/sys/class/hwmon/hwmon0/temp1_input")) {
				return '';
			}
		}
	} else {
		open ($CPUTEMPHANDLE, "/sys/class/hwmon/hwmon0/temp1_input") or do {
			return '';
		};
	}

	my $t = readline($CPUTEMPHANDLE);
	seek $CPUTEMPHANDLE, SEEK_SET, 0;
	chomp $t;
	$t = int($t);
	$t = int($t / 1000) if ($t > 1000);

	return sprintf("%s°", $t);
}

sub caps() {
	if (defined($CAPSPATH)) {
		if (defined($CAPSHANDLE)) {
			if (tell($CAPSHANDLE) == -1) {
				unless (open($CAPSHANDLE, $CAPSPATH)) {
					$CAPSPATH = undef;
					return "? caps";
				}
			}
		} else {
			open($CAPSHANDLE, $CAPSPATH) or do {
				$CAPSPATH = undef;
				return "? caps";
			};
		}

		my $state = readline($CAPSHANDLE);
		seek $CAPSHANDLE, SEEK_SET, 0;
		chomp $state;

		if ($state eq '1') {
			return '☒ caps';
		} else {
			return '☐ caps';
		}
	}
}

sub caps_find() {
	my $str;
	opendir (C, "/sys/class/input");
	my $cnt = 0;

	while (readdir(C)) {
		if (-f sprintf("/sys/class/input/%s/input0::capslock/brightness", $_)) {
			$str = sprintf("/sys/class/input/%s/input0::capslock/brightness", $_);
			last;
		}

		if (-f sprintf("/sys/class/input/%s/input%s::capslock/brightness", $_, $cnt)) {
			$str = sprintf("/sys/class/input/%s/input%s::capslock/brightness", $_, $cnt);
			last;
		}

		$cnt++;
	}

	closedir C;

	return $str;
}

sub spawn (@) {
	my @args = @_;
	my  $pid = fork();

	if ($pid) { # Parent
		return;
	} elsif ($pid == 0) { # Child
		POSIX::setsid ();
# we need no io streams here, right?
# it seems that at least vscode creashes if we close stdio handles
		open(STDOUT, ">", "/dev/null");
		open(STDERR, ">", "/dev/null");
		open(STDIN,  "<", "/dev/null");
		$pid = fork ();

		if ($pid) { # Parent
			# in this place parent quits
			exit 0;
		} elsif ($pid == 0) { # Child
			my $prg = shift(@args);
			# weird situation, silently quit here :)
			exit 0 unless(defined($prg));

			if (@args > 0) {
				exec $prg @args;
			} else {
				exec $prg;
			}
		} else { # Unable to fork()
			syswrite STDERR, "[{\"full_text\":\"ERROR: Could not fork new process: $!\",\"color\":\"#ff0000\"}],\n";
		}
	} else { # Unable to fork()
		syswrite STDERR, "[{\"full_text\":\"ERROR: Could not fork new process: $!\",\"color\":\"#ff0000\"}],\n";
	}
}
